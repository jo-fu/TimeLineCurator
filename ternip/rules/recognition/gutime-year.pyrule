#!/usr/bin/env python

import re
from ternip.rule_engine.rule import Rule
from ternip.timex import Timex

class rule(Rule):
    """
    Rules from GUTime dealing with the year that have a more complex guard than
    can normally be expressed in the formalism
    """

    id = 'gutime-year'
    after = []

    def __init__(self):
        self._rule = re.compile(self._prep_re(r'((<mid-~.+>)?<(\d{4}|\d{2})s?~.+>|<(mid-)?(\d{4}|\d{2})s?~.+>)'), re.I)

    def apply(self, sent):
        senttext = self._toks_to_str(sent)

        success = False
        for match in self._rule.finditer(senttext):
            # Additional more complex guard
            if match.group(3) == None:
                year = int(match.group(5))
            else:
                year = int(match.group(3))

            if year > 1150 and year < 2100\
               and re.match(self._prep_re(r'<\w+~.+>(<(daylight|standard)~.+>)?<time~.+>'), match.string[match.end():],
                re.I) == None\
            and re.match(self._prep_re(r'<.*?~NNP>'), match.string[match.end():], re.I) == None:
                # This rule succeeded
                success = True

                # Get TIMEX extents
                ti = senttext.count('<', 0, match.start())
                tj = senttext.count('<', 0, match.end())

                t = Timex(type='date')

                # If this is a decade and is followed by 's, widen the extent
                following_match = re.match(self._prep_re(r'<\'s~.+>'), match.string[match.end():], re.I)
                if str(year)[-1] == '0' and following_match != None:
                    tj += 1

                self._set_timex_extents(t, sent, ti, tj, False)

        return (sent, success)